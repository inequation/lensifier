STRINGIFY(
// based on Martins Upitis water/underwater shading system (http://devlog-martinsh.blogspot.com/)

uniform Sampler2D SceneColour;
uniform vec2 ScreenSize;
uniform float Timer;
uniform float ResetTimer;
uniform float RandomTime;

static const float permTexUnit = 1.0/256.0;		// Perm texture texel-size
static const float permTexUnitHalf = 0.5/256.0;	// Half perm texture texel-size

//a random texture generator, but you can also use a pre-computed perturbation texture
vec4 rnm(in vec2 tc) 
{
    float noise =  sin(dot(tc ,vec2(12.9898,78.233))) * 43758.5453;

	float noiseR =  fract(noise)*2.0-1.0;
	float noiseG =  fract(noise*1.2154)*2.0-1.0; 
	float noiseB =  fract(noise*1.3453)*2.0-1.0;
	float noiseA =  fract(noise*1.3647)*2.0-1.0;
	
	return vec4(noiseR,noiseG,noiseB,noiseA);
}

float fade(in float t) {
	return t*t*t*(t*(t*6.0-15.0)+10.0);
}

float pnoise3D(in vec3 p)
{
	vec3 pi = permTexUnit*floor(p)+permTexUnitHalf; // Integer part, scaled so +1 moves permTexUnit texel
	// and offset 1/2 texel to sample texel centers
	vec3 pf = fract(p);     // Fractional part for interpolation

	// Noise contributions from (x=0, y=0), z=0 and z=1
	float perm00 = rnm(pi.xy).a ;
	vec3  grad000 = rnm(vec2(perm00, pi.z)).rgb * 4.0 - 1.0;
	float n000 = dot(grad000, pf);
	vec3  grad001 = rnm(vec2(perm00, pi.z + permTexUnit)).rgb * 4.0 - 1.0;
	float n001 = dot(grad001, pf - vec3(0.0, 0.0, 1.0));

	// Noise contributions from (x=0, y=1), z=0 and z=1
	float perm01 = rnm(pi.xy + vec2(0.0, permTexUnit)).a ;
	vec3  grad010 = rnm(vec2(perm01, pi.z)).rgb * 4.0 - 1.0;
	float n010 = dot(grad010, pf - vec3(0.0, 1.0, 0.0));
	vec3  grad011 = rnm(vec2(perm01, pi.z + permTexUnit)).rgb * 4.0 - 1.0;
	float n011 = dot(grad011, pf - vec3(0.0, 1.0, 1.0));

	// Noise contributions from (x=1, y=0), z=0 and z=1
	float perm10 = rnm(pi.xy + vec2(permTexUnit, 0.0)).a ;
	vec3  grad100 = rnm(vec2(perm10, pi.z)).rgb * 4.0 - 1.0;
	float n100 = dot(grad100, pf - vec3(1.0, 0.0, 0.0));
	vec3  grad101 = rnm(vec2(perm10, pi.z + permTexUnit)).rgb * 4.0 - 1.0;
	float n101 = dot(grad101, pf - vec3(1.0, 0.0, 1.0));

	// Noise contributions from (x=1, y=1), z=0 and z=1
	float perm11 = rnm(pi.xy + vec2(permTexUnit, permTexUnit)).a ;
	vec3  grad110 = rnm(vec2(perm11, pi.z)).rgb * 4.0 - 1.0;
	float n110 = dot(grad110, pf - vec3(1.0, 1.0, 0.0));
	vec3  grad111 = rnm(vec2(perm11, pi.z + permTexUnit)).rgb * 4.0 - 1.0;
	float n111 = dot(grad111, pf - vec3(1.0, 1.0, 1.0));

	// Blend contributions along x
	vec4 n_x = mix(vec4(n000, n001, n010, n011), vec4(n100, n101, n110, n111), fade(pf.x));

	// Blend contributions along y
	vec2 n_xy = mix(n_x.xy, n_x.zw, fade(pf.y));

	// Blend contributions along z
	float n_xyz = mix(n_xy.x, n_xy.y, fade(pf.z));

	// We're done, return the final noise value.
	return n_xyz;
}

vec2 coordRot(in vec2 tc, in float angle)
{
    float rotX = ((tc.x*2.0-1.0)*(ScreenSize.x/ScreenSize.y)*cos(angle)) - ((tc.y*2.0-1.0)*sin(angle));
    float rotY = ((tc.y*2.0-1.0)*cos(angle)) + ((tc.x*2.0-1.0)*(ScreenSize.x/ScreenSize.y)*sin(angle));
    rotX = ((rotX/(ScreenSize.x/ScreenSize.y))*0.5+0.5);
    rotY = rotY*0.5+0.5;
    return vec2(rotX,rotY);
}



vec4 LensifierMain(PixelInput PI)
{
	vec2 texcoord = PI.TexCoords.xy;
	float grainsize = 100.0;
    //texture edge bleed removal
    float fade = 12.0;
    vec2 distortFade = vec2(0.0, 0.0);
    distortFade.x = clamp(texcoord.x*fade,0.0,1.0);
    distortFade.x -= clamp(1.0-(1.0-texcoord.x)*fade,0.0,1.0);
    distortFade.y = clamp(texcoord.y*fade,0.0,1.0);
    distortFade.y -= clamp(1.0-(1.0-texcoord.y)*fade,0.0,1.0); 

	vec2 rotCoordsR = texcoord;
	
    float dfade = 1.0-pow((1.0-distortFade.x*distortFade.y),2.0);
	float noiz = 0.0;
	float drop = 0.0;

	float ResetTimerSlow = ResetTimer*0.002;
	float ResetTimerFaster = ResetTimer*0.5;
	
	if (ResetTimer > 0.0 && ResetTimer < 4.0)
	{
    //noiz += pnoise3D(vec3(texcoord*vec2(ScreenSize.x/50.0,ScreenSize.y/80.0)+vec2(0.0,Timer*0.8),Timer*0.2))*0.1;
	noiz += pnoise3D(vec3(texcoord*vec2(ScreenSize.x/90.0,ScreenSize.y/200.0)+vec2(0.0,Timer*0.6),1.0+Timer*0.2))*0.25;
	//noiz += pnoise3D(vec3(texcoord*vec2(ScreenSize.x/200.0,ScreenSize.y/400.0)+vec2(0.0,Timer*0.4),2.0+Timer*0.4))*0.25;
	noiz += pnoise3D(vec3(texcoord*vec2(ScreenSize.x/1200.0,ScreenSize.y/1800.0)+vec2(0.0,Timer*0.5),3.0+Timer*0.3))*0.75;
	}
	
	if (ResetTimer > 0.0 && ResetTimer < 100.0)
	{
    drop += pnoise3D(vec3(texcoord*vec2(ScreenSize.x/40.0,ScreenSize.y/60.0),RandomTime/8.0+Timer*0.02))*0.2;
	drop += pnoise3D(vec3(texcoord*vec2(ScreenSize.x/80.0,ScreenSize.y/200.0),RandomTime*2.1+Timer*0.03))*0.25;
	//drop += pnoise3D(vec3(texcoord*vec2(ScreenSize.x/200.0,ScreenSize.y/400.0),RandomTime*0.23+Timer*0.04))*0.2;
	//drop += pnoise3D(vec3(texcoord*vec2(ScreenSize.x/800.0,ScreenSize.y/1800.0),RandomTime*1.64+Timer*0.05))*0.1;
	}
		
	float dropfade = clamp(ResetTimer*10.0,0.0,1.0);
	
	float drops = clamp(smoothstep(0.0+ResetTimerFaster,0.5+ResetTimerFaster,noiz*0.5+0.5),0.0,1.0);
	float droplet = clamp(smoothstep(0.75+ResetTimerSlow,1.0+ResetTimerSlow,drop*0.5+0.5),0.0,1.0);
	
	droplet = pow(clamp(droplet+drops,0.0,1.0),0.1)*3.0;
	float dropletmask = smoothstep(0.77+ResetTimerSlow,0.79+ResetTimerSlow,drop*0.5+0.5);

	//drops = pow(drops,0.1)*2.0;
	float mask = smoothstep(0.02+ResetTimerFaster,0.03+ResetTimerFaster,noiz*0.5+0.5);
	

	vec2 droplets = vec2(dFdx(texcoord+droplet).r,dFdy(texcoord+droplet).g);		

	vec2 wave;
	
	vec2 wavecoordR;
	vec2 wavecoordG;
	vec2 wavecoordB;
	vec2 dropcoordR;
	vec2 dropcoordG;	
	vec2 dropcoordB;

	if (ResetTimer < 1.0)
	{
    wave.x = sin((texcoord.x-texcoord.y*2.0)-Timer*1.5)*0.25;
	wave.x += cos((texcoord.y*4.0-texcoord.x*6.0)+Timer*4.2)*0.5;
	wave.x += sin((texcoord.x*9.0+texcoord.y*8.0)+Timer*3.5)*0.25;
	
    wave.y = sin((texcoord.x*2.0+texcoord.x*2.5)+Timer*2.5)*0.25;
	wave.y += cos((texcoord.y*3.0+texcoord.x*6.0)-Timer*2.5)*0.5;
	wave.y += sin((texcoord.x*11.0-texcoord.y*12.0)+Timer*4.5)*0.25;
	}
	
	wave = wave*dfade;
	droplets = droplets*dfade;

	wavecoordR = texcoord-wave*0.004;
	wavecoordG = texcoord-wave*0.006;	
	wavecoordB = texcoord-wave*0.008;
	
	dropcoordR = (texcoord-droplets*1.1);
	dropcoordG = (texcoord-droplets*1.2);	
	dropcoordB = (texcoord-droplets*1.3);	

	vec3 color = Sample2D(SceneColour, texcoord).rgb;

	vec3 dropletcolor = vec3(0.0, 0.0, 0.0);	
	dropletcolor.r = Sample2D(SceneColour, dropcoordR).r;
	dropletcolor.g = Sample2D(SceneColour, dropcoordG).g;
	dropletcolor.b = Sample2D(SceneColour, dropcoordB).b;
	
	vec3 wavecolor = vec3(0.0, 0.0, 0.0);
	wavecolor.r = Sample2D(SceneColour, wavecoordR).r;
	wavecolor.g = Sample2D(SceneColour, wavecoordG).g;
	wavecolor.b = Sample2D(SceneColour, wavecoordB).b;
	
	vec3 final = mix(wavecolor,color,dropfade);
	final = mix(final,dropletcolor,clamp(dropletmask+mask,0.0,1.0)*dropfade);


	return vec4(final,1.0);
	
}
)
